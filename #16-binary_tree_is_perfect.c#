#include "binary_trees.h"

/**
 * binary_tree_iif a binary tree is perfect
 * @tree: a pto the root node of the tree to check
 *
 * Return: 1 if the tree is perfect
 *         0 if the tree is not perfect
 *         0 if tree is NULL
 */
int binary_tree_is_perfect(const binary_tree_t *tree)
{
    size_t height = 0;
    size_t nodes = 0;
    size_t power = 0;

    if (!tree)
        return (0);

    if (!tree->left && !tree->right)
        return (1);

    height = binary_tree_height(tree);
    nodes = binary_tree_size(tree);

    power = (size_t)pow(2, height + 1) - 1;
    return (power == nodes);
}
In this function, binary_tree_height and binary_tree_size are assumed to be implemented elsewhere and should return the height and the total number of nodes in the tree, respectively.

Ensure to include the necessary header file binary_trees.h, which might contain the structure definition and function prototypes for binary trees. The code uses the pow function from the standard library to calculate 2^height - 1 to compare it with the number of nodes in the tree.

This function checks whether the given binary tree satisfies the conditions to be considered a perfect binary tree and returns the result accordingly.






/**
 * _pow_recursion - x raised to the power of y
 * @x: the value to exponentiate
 * @y: the power to raise x to
 * Return: x to the power of y, or -1 if y is negative
 */
int _pow_recursion(int x, int y)
{
	if (y < 0)
		return (-1);
	if (y == 0)
		return (1);
	else
		return (x * _pow_recursion(x, y - 1));
}
